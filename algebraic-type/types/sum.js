const { IObject } = require("../intrinsics");
const { setPrototypeOf } = IObject;
const { isTaggedCall, tagResolve } = require("../templating");

const { inspect } = require("util");
const inspectSymbol = inspect.custom;

const private = require("../private");
const fail = require("../fail");
const DIS = require("@algebraic/dense-int-set");

const { f, constructible } = require("../function-define");
const ConstructorDeclaration = require("../constructor-definition");

const onPrototype = { [inspectSymbol]: inspectSum };
const isObject = value => value && typeof value === "object";


function Sum(name, body)
{
    const constructors = body
        .map(({ name, body }) => toConstructorDeclaration(name, body));

    return { name, onPrototype, constructorDeclarations: constructors };
}

module.exports = Sum;

Sum.Sum = Sum;

Sum.isSumBody = declaration =>
{
    console.log(declaration);
    console.log(declaration.every(item => item instanceof SumCaseOf));

    return declaration.every(item => item instanceof SumCaseOf);
}

const SumCaseOf = constructible ("caseof",
    (caseof, ...arguments) =>

        arguments.length === 2 &&
        isObject(arguments[0]) &&
        isObject(arguments[1]) ?
            instanceCaseOf(...arguments) :

        isTaggedCall(arguments) ?
            toCaseOf(f (
                tagResolve(...arguments),
                ({ name }, ...body) =>
                    toCaseOf({ name }, body))) :

        arguments.length === 1 &&
        arguments[0] instanceof type ?
            toCaseOf(
                { name: arguments[0].name },
                arguments.map(T => of => T)) :

        arguments.length >= 2 ?
            toCaseOf(
                { name: arguments[0] },
                arguments.slice(1)) :

        fail ("No. (Unnamed caseof not allowed)."));

Sum.caseof = SumCaseOf;

const SumCaseOfPrototype = Sum.caseof.prototype;

const toCaseOf = (target, body = []) =>
    IObject.setPrototypeOf(
        IObject.assign(target, { body }),
        SumCaseOfPrototype);

function toConstructorDeclaration(name, fieldDeclarations)
{
    const innerT =
        fieldDeclarations.length === 1 &&
        typeof fieldDeclarations[0] === "object" ?
            require("./data")(name, fieldDeclarations[0]) :
            false;

    return ConstructorDeclaration(
        name,
        innerT ?
            [of => innerT] :
            fieldDeclarations,
        innerT ?
            (T, C, [first, ...rest]) => [false, [innerT(first), ...rest]] :
            false,
        initialize);
}

/*
    const singleton =
        definition.isUnaryConstructor &&
        IObject.freeze(IObject.create(T.prototype));
*/

function initialize(constructor, processed)
{
    const values = IObject.assign([], processed);

    return [false, { constructor, values }];
}

function instanceCaseOf(target, cases)
{
    const T = type.of(target);
    const { constructors, EveryCID } = type.definition(T);

    const hasDefault = IObject.has("default", cases);
    const present = IObject
        .keys(cases)
        .reduce((set, name) =>
            name === "default" ? set :
            IObject.has(name, constructors) ?
                DIS.add(constructors[name].ID, set) :
                fail.type (
                    `${T.name}.caseof call has non-constructor case ${name}.`),
            DIS.Empty);

    if (!hasDefault && !DIS.equals(present, EveryCID))
    {
        const names = IObject.keys(constructors);
        const missing = DIS
            .toArray(DIS.subtract(EveryCID, present))
            .map(CID => names[CID]);

        fail(
            `${T.name}.match call is missing cases for ` +
            `${list(missing)}, or use default.`);
    }

    const { name } = private(target, "constructor").name;
    const handler = cases[name] || cases.default;

    return handler(...private(target, "values"));
}

function list(items)
{
    const count = items.length;

    return  count === 1 ? items[0] :
            count === 2 ? items.join(" and ") :
            items
                .map((item, index) =>
                    `${index === count - 1 ? "and " : ""} ${item}`)
                .join(", ");
}

function inspectSum (depth, options)
{
    if (depth < -1)
        return "{ â€¦ }";

    const T = type.of(this);
    const nextDepth = options.depth === null ? null : options.depth - 1;
    const inner = value => inspect(value, { ...options, depth: nextDepth });
    const Tname = T.name;
    const constructor = private(this, "constructor");
    const Cname = constructor.name;

    const fullyQualified = Tname === Cname ? `${Tname}*` : `${T.name}.${Cname}`;
    const values = constructor.isUnaryConstructor ?
        "" :
        ` { ${private(this, "values").map(inner).join(", ")} }`;

    // FIXME: if autogenerated inner type...
    // Or maybe just use * when its ONE item with the same name...
    return `${fullyQualified}${values}`;
};
